definition:
  openapi: 3.0.0
  info:
    title: Gyors éttermi rendszer API dokumentáció
    description: A /user/login tól kapott tokent kell be másolni az autentikációhoz
    version: 0.0.2
  servers:
    - url: https://mateszadam.koyeb.app/
    - url: http://localhost:5005/
  components:
    securitySchemes:
      adminBearerAuth:
        type: http
        scheme: bearer
        bearerFormat: JWT
        description: 'Enter your bearer token in the format **Bearer <token>**'
      customerBearerAuth:
        type: http
        scheme: bearer
        bearerFormat: JWT
        description: 'Enter your bearer token in the format **Bearer <token>**'
      kitchenBearerAuth:
        type: http
        scheme: bearer
        bearerFormat: JWT
        description: 'Enter your bearer token in the format **Bearer <token>**'
      salesmanBearerAuth:
        type: http
        scheme: bearer
        bearerFormat: JWT
        description: 'Enter your bearer token in the format **Bearer <token>**'
    parameters:
      AcceptLanguage:
        name: Accept-Language
        in: header
        default: hu
        description: Language preference for response (hu, en-GB)
        required: false
        schema:
          type: string
  security:
    - adminBearerAuth: []
    - customerBearerAuth: []
    - salesmanBearerAuth: []
    - kitchenBearerAuth: []
apis: [./src/swagger/swagger.yaml]

paths:
  # Category Paths
  /category/add:
    post:
      summary: Add a new category
      parameters:
        - $ref: '#/components/parameters/AcceptLanguage'
      tags: [Category]
      security:
        - adminBearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - icon
              properties:
                name:
                  type: string
                  description: Name of the item
                icon:
                  type: string
                  description: Icon of the category
                  default: no-image.svg
      responses:
        200:
          description: Category added successfully
        400:
          description: Bad request
  /category/all:
    get:
      summary: Get all categories
      parameters:
        - $ref: '#/components/parameters/AcceptLanguage'
      tags: [Category]
      security:
        - adminBearerAuth: []
        - customerBearerAuth: []
      responses:
        200:
          description: A list of categories
        400:
          description: Bad request
  /category/{name}:
    delete:
      summary: Delete category by name
      tags: [Category]
      security:
        - adminBearerAuth: []
      parameters:
        - $ref: '#/components/parameters/AcceptLanguage'
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Category deleted
        401:
          description: Unauthorized
  /category/{id}:
    put:
      summary: Modify category
      tags: [Category]
      security:
        - adminBearerAuth: []
      parameters:
        - $ref: '#/components/parameters/AcceptLanguage'
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - icon
              properties:
                name:
                  type: string
                  description: Name of the item
                icon:
                  type: string
                  description: Icon of the category
                  default: no-image.svg
      responses:
        200:
          description: Category modifyed
        401:
          description: Unauthorized
  # Food Paths
  /food/add:
    post:
      summary: Add new food items
      tags: [Food]
      security:
        - adminBearerAuth: []
      parameters:
        - $ref: '#/components/parameters/AcceptLanguage'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Food'
      responses:
        200:
          description: Food items added successfully
        400:
          description: Bad request
        401:
          description: Unauthorized

  /food/allEnabled:
    get:
      summary: Get all enabled food items
      tags: [Food]
      security:
        - adminBearerAuth: []
        - customerBearerAuth: []
      parameters:
        - $ref: '#/components/parameters/AcceptLanguage'
      responses:
        200:
          description: List of enabled food items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Food'
        401:
          description: Unauthorized

  /food/all:
    get:
      summary: Get all food
      parameters:
        - $ref: '#/components/parameters/AcceptLanguage'
      tags: [Food]
      security:
        - adminBearerAuth: []
      responses:
        200:
          description: List of enabled food items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Food'
        401:
          description: Unauthorized

  /food/allToOrder:
    get:
      summary: Get food items for ordering (name and price only)
      parameters:
        - $ref: '#/components/parameters/AcceptLanguage'
      tags: [Food]
      security:
        - adminBearerAuth: []
        - customerBearerAuth: []
      responses:
        200:
          description: List of food items
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    price:
                      type: number
        401:
          description: Unauthorized
  /food/name/{name}:
    get:
      summary: Get food by name
      tags: [Food]
      security:
        - adminBearerAuth: []
        - customerBearerAuth: []
      parameters:
        - $ref: '#/components/parameters/AcceptLanguage'
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Food details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Food'
        401:
          description: Unauthorized
    delete:
      summary: Delete food by name
      tags: [Food]
      security:
        - adminBearerAuth: []
      parameters:
        - $ref: '#/components/parameters/AcceptLanguage'
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Food deleted
        401:
          description: Unauthorized
  /food/category/{category}:
    get:
      summary: Get food by category
      tags: [Food]
      security:
        - adminBearerAuth: []
        - customerBearerAuth: []
      parameters:
        - $ref: '#/components/parameters/AcceptLanguage'
        - name: category
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Food details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Food'
        401:
          description: Unauthorized

  /food/update/{id}:
    put:
      summary: Update food item
      tags: [Food]
      security:
        - adminBearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Food'
      parameters:
        - $ref: '#/components/parameters/AcceptLanguage'
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Food updated successfully
        400:
          description: Bad request
        401:
          description: Unauthorized

  /food/disable/{name}:
    patch:
      summary: Disable food item
      tags: [Food]
      security:
        - adminBearerAuth: []
      parameters:
        - $ref: '#/components/parameters/AcceptLanguage'
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Food disabled successfully
        400:
          description: Bad request
        401:
          description: Unauthorized

  /food/enable/{name}:
    patch:
      summary: Enable food item
      tags: [Food]
      security:
        - adminBearerAuth: []
      parameters:
        - $ref: '#/components/parameters/AcceptLanguage'
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Food enabled successfully
        400:
          description: Bad request
        401:
          description: Unauthorized

# Image paths
/images/name/{imageName}:
  get:
    summary: Retrieve an image
    tags: [Images]
    security:
      - adminBearerAuth: []
      - customerBearerAuth: []
    parameters:
      - $ref: '#/components/parameters/AcceptLanguage'
      - in: path
        name: imageName
        required: true
        schema:
          type: string
        description: The name of the image to retrieve
    responses:
      200:
        description: An image file.
        content:
          image/svg+xml:
            schema:
              type: string
              format: binary
      400:
        description: Bad request
/images:
  post:
    summary: Upload an image
    tags: [Images]
    security:
      - adminBearerAuth: []
      - customerBearerAuth: []
    parameters:
      - $ref: '#/components/parameters/AcceptLanguage'
    requestBody:
      required: true
      content:
        multipart/form-data:
          schema:
            type: object
            properties:
              image:
                type: string
                format: binary
    responses:
      200:
        description: Image uploaded successfully
      400:
        description: Bad request
/images/all:
  get:
    summary: List all images
    tags: [Images]
    security:
      - adminBearerAuth: []
      - customerBearerAuth: []
    parameters:
      - $ref: '#/components/parameters/AcceptLanguage'
    responses:
      200:
        description: A list of all images
      400:
        description: Bad request
/images/profile:
  get:
    summary: List all profile pictures
    security:
      - adminBearerAuth: []
      - customerBearerAuth: []
    parameters:
      - $ref: '#/components/parameters/AcceptLanguage'
    tags: [Images]
    responses:
      200:
        description: A list of all profile pictures
      400:
        description: Bad request
/images/profile/{name}:
  get:
    summary: Get profile picture by name
    tags: [Images]
    security:
      - adminBearerAuth: []
      - customerBearerAuth: []
    parameters:
      - $ref: '#/components/parameters/AcceptLanguage'
      - in: path
        name: name
        required: true
        schema:
          type: string
        description: The name of the profile picture to retrieve
    responses:
      200:
        description: A profile picture file.
        content:
          image/svg+xml:
            schema:
              type: string
              format: binary
      400:
        description: Bad request

# Material
/material/add:
  post:
    summary: Add new material change to inventory
    parameters:
      - $ref: '#/components/parameters/AcceptLanguage'
    tags: [Material changes]
    security:
      - adminBearerAuth: []
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                default: kenyér
              quantity:
                type: number
                default: 2
              message:
                type: string
                default: Vásárlás
    responses:
      200:
        description: Materials successfully added
      400:
        description: Bad request - Invalid input
      401:
        description: Unauthorized - Invalid or missing token
/material/stock:
  get:
    summary: Get current material stock levels
    tags: [Material changes]
    parameters:
      - $ref: '#/components/parameters/AcceptLanguage'
    security:
      - adminBearerAuth: []
    responses:
      200:
        description: List of materials with stock levels
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  _id:
                    type: string
                  inStock:
                    type: number
                  unit:
                    type: string
      401:
        description: Unauthorized access
/material/all:
  get:
    summary: Get all materials from recipes and stock
    tags: [Material changes]
    parameters:
      - $ref: '#/components/parameters/AcceptLanguage'
    security:
      - adminBearerAuth: []
    responses:
      200:
        description: Combined list of materials from recipes and stock
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  _id:
                    type: string
                  inStock:
                    type: number
                  unit:
                    type: string
      401:
        description: Unauthorized access
/material/changes:
  get:
    summary: Get all materials changes
    tags: [Material changes]
    parameters:
      - $ref: '#/components/parameters/AcceptLanguage'
    security:
      - adminBearerAuth: []
    responses:
      200:
        description: Successfully retrieved
      401:
        description: Unauthorized access
/material/update/{id}:
  patch:
    summary: Update material change by ID
    tags: [Material changes]
    parameters:
      - $ref: '#/components/parameters/AcceptLanguage'
      - in: path
        name: id
        required: true
        schema:
          type: string
        description: The ID of the material to update
    security:
      - adminBearerAuth: []
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                description: Name of the material
              quantity:
                type: number
                description: Quantity of the material
    responses:
      200:
        description: Material updated successfully
      400:
        description: Bad request
      401:
        description: Unauthorized access

# Order
/order/new:
  post:
    summary: Create a new order
    tags: [Orders]
    security:
      - adminBearerAuth: []
      - customerBearerAuth: []
    parameters:
      - $ref: '#/components/parameters/AcceptLanguage'
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              costumerId:
                type: string
                default: 6793bb6219bff92baf980ade
              orderedProducts:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                      default: Pizza
                    quantity:
                      type: number
                      default: 2
                  required:
                    - name
                    - quantity
            required:
              - costumerId
              - orderedProducts
    responses:
      201:
        description: Order created successfully
      400:
        description: Bad request
/order/salesman:
  get:
    summary: Get all orders for salesman
    parameters:
      - $ref: '#/components/parameters/AcceptLanguage'
    tags: [Orders]
    security:
      - adminBearerAuth: []
      - salesmanBearerAuth: []
    responses:
      200:
        description: List of ongoing orders
      400:
        description: Bad request
/order/page/{page}:
  get:
    summary: Get all ongoing orders
    tags: [Orders]
    security:
      - adminBearerAuth: []
    parameters:
      - $ref: '#/components/parameters/AcceptLanguage'
      - in: path
        name: page
        schema:
          type: string
        required: true
        description: Page number
    responses:
      200:
        description: List of ongoing orders
      400:
        description: Bad request
/order/ongoing/{id}:
  get:
    summary: Get ongoing orders by user id
    tags: [Orders]
    security:
      - adminBearerAuth: []
      - customerBearerAuth: []
    parameters:
      - $ref: '#/components/parameters/AcceptLanguage'
      - in: path
        name: id
        schema:
          type: string
        required: true
        description: User ID
    responses:
      200:
        description: List of ongoing orders for the user
      400:
        description: Bad request
/order/all/{id}:
  get:
    summary: Get an order by user id
    tags: [Orders]
    security:
      - adminBearerAuth: []
      - customerBearerAuth: []
    parameters:
      - $ref: '#/components/parameters/AcceptLanguage'
      - in: path
        name: id
        schema:
          type: string
        required: true
        description: User ID
    responses:
      200:
        description: Received the orders
      400:
        description: Bad request
/order/kitchen:
  get:
    summary: Get all orders for kitchen
    tags: [Orders]
    parameters:
      - $ref: '#/components/parameters/AcceptLanguage'
    security:
      - adminBearerAuth: []
      - kitchenBearerAuth: []
    responses:
      200:
        description: List of orders for kitchen
      400:
        description: Bad request
/order/finish/{id}:
  patch:
    summary: Mark an order as finished
    tags: [Orders]
    security:
      - adminBearerAuth: []
      - kitchenBearerAuth: []
    parameters:
      - $ref: '#/components/parameters/AcceptLanguage'
      - in: path
        name: id
        schema:
          type: string
        required: true
        description: Order ID
    responses:
      200:
        description: Order marked as finished
      400:
        description: Bad request
/order/handover/{id}:
  patch:
    summary: Get an order for handover
    tags: [Orders]
    security:
      - adminBearerAuth: []
      - salesmanBearerAuth: []

    parameters:
      - $ref: '#/components/parameters/AcceptLanguage'
      - in: path
        name: id
        schema:
          type: string
        required: true
        description: Order ID
    responses:
      200:
        description: Order handed over
      400:
        description: Bad request

/order/revert/finish/{id}:
  patch:
    summary: Mark an order as finished
    tags: [Orders]
    security:
      - adminBearerAuth: []
      - kitchenBearerAuth: []
    parameters:
      - $ref: '#/components/parameters/AcceptLanguage'
      - in: path
        name: id
        schema:
          type: string
        required: true
        description: Order ID
    responses:
      200:
        description: Rever successfully done
      400:
        description: Bad request

/order/revert/handover/{id}:
  patch:
    summary: Get an order for handover
    tags: [Orders]
    security:
      - adminBearerAuth: []
      - salesmanBearerAuth: []
    parameters:
      - $ref: '#/components/parameters/AcceptLanguage'
      - in: path
        name: id
        schema:
          type: string
        required: true
        description: Order ID
    responses:
      200:
        description: Rever successfully done
      400:
        description: Bad request

/order/display:
  get:
    summary: Get orders for display
    tags: [Orders]
    security: []
    parameters:
      - $ref: '#/components/parameters/AcceptLanguage'
    responses:
      200:
        description: List of orders for display
      400:
        description: Bad request

/order/time/{from}/{to}:
  get:
    summary: Get all orders within a time range
    tags: [Orders]
    security:
      - adminBearerAuth: []
    parameters:
      - $ref: '#/components/parameters/AcceptLanguage'
      - in: path
        name: from
        schema:
          type: string
          format: date
        required: true
        description: Start date of the time range
      - in: path
        name: to
        schema:
          type: string
          format: date
        description: End date of the time range
    responses:
      200:
        description: List of orders within the time range
      400:
        description: Bad request
/order/finished/{id}:
  get:
    summary: Get finished orders by user id
    tags: [Orders]
    security:
      - adminBearerAuth: []
      - customerBearerAuth: []
    parameters:
      - $ref: '#/components/parameters/AcceptLanguage'
      - in: path
        name: id
        schema:
          type: string
        required: true
        description: User ID
    responses:
      200:
        description: List of finished orders for the user
      400:
        description: Bad request

# Token validation
/token/validate:
  get:
    summary: Validate token
    tags: [Token validation]
    parameters:
      - $ref: '#/components/parameters/AcceptLanguage'
    responses:
      200:
        description: Token is valid
      400:
        description: Token is invalid

# Units
/unit/add:
  post:
    summary: Add a new unit of measure
    tags: [Units]
    security:
      - adminBearerAuth: []
    parameters:
      - $ref: '#/components/parameters/AcceptLanguage'
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - materialName
              - unit
            properties:
              materialName:
                type: string
                description: Name of the item
              unit:
                type: string
                description: Name of the unit of measure
    responses:
      200:
        description: Unit successfully added
      400:
        description: Bad request
      401:
        description: Unauthorized

/unit/all:
  get:
    summary: Get all units of measure
    tags: [Units]
    parameters:
      - $ref: '#/components/parameters/AcceptLanguage'
    security:
      - adminBearerAuth: []
    responses:
      200:
        description: List of all units retrieved successfully
      400:
        description: Bad request
      401:
        description: Unauthorized

/unit/delete/{name}:
  delete:
    summary: Delete unit of measure by name
    tags: [Units]
    parameters:
      - $ref: '#/components/parameters/AcceptLanguage'
      - in: path
        name: name
        schema:
          type: string
          required: true
          description: Unit name
    security:
      - adminBearerAuth: []
    responses:
      200:
        description: List of all units retrieved successfully
      400:
        description: Bad request
      401:
        description: Unauthorized

/unit/update/{name}:
  patch:
    summary: Delete unit of measure by name
    tags: [Units]
    parameters:
      - $ref: '#/components/parameters/AcceptLanguage'
      - in: path
        name: name
        schema:
          type: string
          required: true
          description: Unit name
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - unit
            properties:
              unit:
                type: string
                default: db
    security:
      - adminBearerAuth: []
    responses:
      200:
        description: List of all units retrieved successfully
      400:
        description: Bad request
      401:
        description: Unauthorized

# User handling
/user/all:
  get:
    tags: [User handling]
    security:
      - adminBearerAuth: []
    summary: Get all users
    parameters:
      - $ref: '#/components/parameters/AcceptLanguage'
    responses:
      201:
        description: User registered successfully
      400:
        description: Bad request
      401:
        description: Not authorized

/user/register/customer:
  post:
    tags: [User handling]
    summary: Register a new user
    security: []
    parameters:
      - $ref: '#/components/parameters/AcceptLanguage'
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - name
              - password
              - email
            properties:
              name:
                type: string
                default: customerUser
              password:
                type: string
                default: customerUser!1
              email:
                type: string
                default: admin@gmail.hu
    responses:
      201:
        description: User registered successfully

/user/register/admin:
  post:
    tags: [User handling]
    summary: Register a new admin
    parameters:
      - $ref: '#/components/parameters/AcceptLanguage'
    security:
      - adminBearerAuth: []
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - name
              - password
              - email
            properties:
              name:
                type: string
                default: adminUser
              password:
                type: string
                default: adminUser!1
              email:
                type: string
                default: admin@gmail.com
    responses:
      201:
        description: Admin registered successfully
      400:
        description: Bad request

/user/delete/admin/{id}:
  delete:
    tags: [User handling]
    security:
      - adminBearerAuth: []
    summary: Delete users with admin roles (only admin can access)
    parameters:
      - $ref: '#/components/parameters/AcceptLanguage'
      - in: path
        name: id
        required: true
        schema:
          type: string
        description: The id of the user
    responses:
      201:
        description: Deleted successfully
      400:
        description: Bad request

/user/delete/customer/{id}:
  delete:
    tags: [User handling]
    summary: Delete costumers.
    parameters:
      - $ref: '#/components/parameters/AcceptLanguage'
      - in: path
        name: id
        required: true
        schema:
          type: string
        description: The id of the user
    security:
      - adminBearerAuth: []
      - customerBearerAuth: []
    responses:
      201:
        description: Deleted successfully
      400:
        description: Bad request

/user/login:
  post:
    tags: [User handling]
    summary: Login a user
    parameters:
      - $ref: '#/components/parameters/AcceptLanguage'
    security: []
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - name
              - password
            properties:
              name:
                type: string
                default: admin
              password:
                type: string
                default: admin
    responses:
      200:
        description: User logged in successfully

/user/logout:
  post:
    tags: [User handling]
    summary: Logout a user
    parameters:
      - $ref: '#/components/parameters/AcceptLanguage'
    security:
      - adminBearerAuth: []
    responses:
      200:
        description: User logged out successfully

/user/picture/change/{newImageName}:
  post:
    tags: [User handling]
    summary: Change profile picture
    security:
      - adminBearerAuth: []
      - customerBearerAuth: []
    parameters:
      - $ref: '#/components/parameters/AcceptLanguage'
      - in: path
        name: newImageName
        required: true
        schema:
          type: string
        description: The new image name for the profile picture
    responses:
      200:
        description: Profile picture changed successfully

components:
  schemas:
    Food:
      type: object
      required:
        - name
        - price
        - material
      properties:
        name:
          type: string
        price:
          type: number
        materials:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              quantity:
                type: number
        isEnabled:
          type: boolean
          default: true
        categoryId:
          type: string
          default: 679f462818947c0fa463a88f
        subCategoryId:
          type: array
          items:
            type: string
            default: 679f462818947c0fa463a88f

        image:
          type: string
